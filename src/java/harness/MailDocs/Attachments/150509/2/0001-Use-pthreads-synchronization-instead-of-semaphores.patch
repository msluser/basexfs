From f9835ecbd96e77ce44d91418200600d75d371108 Mon Sep 17 00:00:00 2001
From: Anatol Pomozov <anatol.pomozov@gmail.com>
Date: Sat, 4 Jun 2011 21:05:21 -0700
Subject: [PATCH] Use pthreads synchronization instead of semaphores

Darwin does not implement sem_init/sem_destroy [1]. So the options are:
- Use portable enough pthreads
- Use named semaphores sem_open/sem_unlink

[1] http://stackoverflow.com/questions/2752085/c-semaphores-sem-wait-throwing-inexplicable-error
---
 sshfs.c |   27 ++++++++++++++-------------
 1 files changed, 14 insertions(+), 13 deletions(-)

diff --git a/sshfs.c b/sshfs.c
index 8a8e858..b6f9cfd 100644
--- a/sshfs.c
+++ b/sshfs.c
@@ -19,7 +19,6 @@
 #include <string.h>
 #include <stdint.h>
 #include <errno.h>
-#include <semaphore.h>
 #include <pthread.h>
 #include <netdb.h>
 #include <signal.h>
@@ -151,7 +150,7 @@ typedef void (*request_func)(struct request *);
 
 struct request {
 	unsigned int want_reply;
-	sem_t ready;
+	pthread_mutex_t ready;
 	uint8_t reply_type;
 	int replied;
 	int error;
@@ -164,7 +163,7 @@ struct request {
 };
 
 struct read_chunk {
-	sem_t ready;
+	pthread_mutex_t ready;
 	off_t offset;
 	size_t size;
 	struct buffer data;
@@ -1221,14 +1220,14 @@ static int sftp_read(uint8_t *type, struct buffer *buf)
 static void request_free(struct request *req)
 {
 	buf_free(&req->reply);
-	sem_destroy(&req->ready);
+	pthread_mutex_destroy(&req->ready);
 	g_free(req);
 }
 
 static void chunk_free(struct read_chunk *chunk)
 {
 	buf_free(&chunk->data);
-	sem_destroy(&chunk->ready);
+	pthread_mutex_destroy(&chunk->ready);
 	g_free(chunk);
 }
 
@@ -1254,7 +1253,7 @@ static int clean_req(void *key_, struct request *req)
 
 	req->error = -EIO;
 	if (req->want_reply)
-		sem_post(&req->ready);
+		pthread_mutex_unlock(&req->ready);
 	else {
 		if (req->end_func)
 			req->end_func(req);
@@ -1319,7 +1318,7 @@ static int process_one_request(void)
 		req->reply_type = type;
 		req->replied = 1;
 		if (req->want_reply)
-			sem_post(&req->ready);
+			pthread_mutex_unlock(&req->ready);
 		else {
 			if (req->end_func) {
 				pthread_mutex_lock(&sshfs.lock);
@@ -1692,7 +1691,7 @@ static int sftp_request_wait(struct request *req, uint8_t type,
 		err = req->error;
 		goto out;
 	}
-	while (sem_wait(&req->ready));
+	while (pthread_mutex_lock(&req->ready));
 	if (req->error) {
 		err = req->error;
 		goto out;
@@ -1754,7 +1753,8 @@ static int sftp_request_send(uint8_t type, struct iovec *iov, size_t count,
 	req->want_reply = want_reply;
 	req->end_func = end_func;
 	req->data = data;
-	sem_init(&req->ready, 0, 0);
+	pthread_mutex_init(&req->ready, NULL);
+	pthread_mutex_lock(&req->ready);
 	buf_init(&req->reply, 0);
 	pthread_mutex_lock(&sshfs.lock);
 	if (begin_func)
@@ -2433,7 +2433,7 @@ static void sshfs_read_end(struct request *req)
 	} else
 		chunk->res = -EIO;
 
-	sem_post(&chunk->ready);
+	pthread_mutex_unlock(&chunk->ready);
 	chunk_put(chunk);
 }
 
@@ -2465,7 +2465,8 @@ static void submit_read(struct sshfs_file *sf, size_t size, off_t offset,
 {
 	struct read_chunk *chunk = g_new0(struct read_chunk, 1);
 
-	sem_init(&chunk->ready, 0, 0);
+	pthread_mutex_init(&chunk->ready, NULL);
+	pthread_mutex_lock(&chunk->ready);
 	buf_init(&chunk->data, 0);
 	chunk->offset = offset;
 	chunk->size = size;
@@ -2481,7 +2482,7 @@ static void submit_read(struct sshfs_file *sf, size_t size, off_t offset,
 static int wait_chunk(struct read_chunk *chunk, char *buf, size_t size)
 {
 	int res;
-	while (sem_wait(&chunk->ready));
+	while (pthread_mutex_lock(&chunk->ready));
 	res = chunk->res;
 	if (res > 0) {
 		if ((size_t) res > size)
@@ -2491,7 +2492,7 @@ static int wait_chunk(struct read_chunk *chunk, char *buf, size_t size)
 		chunk->size -= res;
 		chunk->res -= res;
 	}
-	sem_post(&chunk->ready);
+	pthread_mutex_unlock(&chunk->ready);
 	chunk_put_locked(chunk);
 	return res;
 }
-- 
1.7.5.2

